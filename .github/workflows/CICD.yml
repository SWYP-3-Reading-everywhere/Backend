name: CICD

on:
  push:
    branches: [ "dev" ]
  pull_request:
    branches: [ "dev" ]

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    if: github.repository == 'SWYP-3-Reading-everywhere/readeve-BackEnd'
    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Build with Gradle
        run: |
          echo ${{secrets.APPLICATION_SECRET}} | base64 --decode > ./src/main/resources/application-secret.yml
          cat ./src/main/resources/application-secret.yml
          chmod +x ./gradlew
          ./gradlew build -x test

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build Docker
        run: docker build --platform linux/amd64 -t ${{ secrets.DOCKERHUB_USERNAME }}/bookeverywhere . 

      - name: Push Docker
        run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/bookeverywhere:latest

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Set target IP
        run: |
          STATUS=$(curl -o /dev/null -w "%{http_code}" "https://${{ secrets.BOOKEVERYWHERE_URL }}/env")
          echo $STATUS
          if [ "$STATUS" = "200" ]; then
            CURRENT_UPSTREAM=$(curl -s "https://${{ secrets.BOOKEVERYWHERE_URL }}/env" | jq -r '.data')
          else
            CURRENT_UPSTREAM=blue
          fi
          echo CURRENT_UPSTREAM=$CURRENT_UPSTREAM >> $GITHUB_ENV
          if [ $CURRENT_UPSTREAM = blue ]; then
            echo "CURRENT_PORT=8081" >> $GITHUB_ENV
            echo "STOPPED_PORT=8082" >> $GITHUB_ENV
            echo "TARGET_UPSTREAM=green" >> $GITHUB_ENV
          elif [ $CURRENT_UPSTREAM = green ]; then
            echo "CURRENT_PORT=8082" >> $GITHUB_ENV
            echo "STOPPED_PORT=8081" >> $GITHUB_ENV
            echo "TARGET_UPSTREAM=blue" >> $GITHUB_ENV
          else
            echo "error"
            exit 1
          fi


      - name: Docker compose
        uses: appleboy/ssh-action@master
        with:
          username: ubuntu
          host: ${{ secrets.BOOKEVERYWHERE_IP }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script_stop: true
          script: |
            sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/bookeverywhere:latest
            sudo docker-compose -f docker-compose-${{env.TARGET_UPSTREAM}}.yml up -d

      - name: Check deploy server URL and validate CURRENT_UPSTREAM
        env:
          URL: ${{ secrets.BOOKEVERYWHERE_URL }}
          EXPECTED_UPSTREAM: CURRENT_UPSTREAM
        run: |
          max_attempts=7
          attempt=0
          success=false
          while [ $attempt -lt $max_attempts ]; do
            echo "Attempt $((attempt+1)) of $max_attempts"
            response=$(curl -s "https://${URL}/env")
            current_upstream_re=$(echo $response | jq -r '.data')
            if [ $current_upstream_re == $EXPECTED_UPSTREAM ]; then
              echo "Success: CURRENT_UPSTREAM matches expected value."
              success=true
              break
            else
              echo "Retrying in 10 seconds... (CURRENT_UPSTREAM does not match)"
              sleep 10s
            fi
            attempt=$((attempt+1))
          done
          if [ $success != true ]; then
            echo "Failed: CURRENT_UPSTREAM does not match expected value after $max_attempts attempts."
            exit 1
          fi


      - name: Change nginx upstream
        uses: appleboy/ssh-action@master
        with:
          username: ubuntu
          host: ${{ secrets.BOOKEVERYWHERE_IP }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script_stop: true
          script: |
            sudo docker exec -i nginxserver bash -c 'echo "set \$service_url ${{ env.TARGET_UPSTREAM }};" > /etc/nginx/conf.d/service-env.inc && nginx -s reload' 

      - name: Stop current server
        uses: appleboy/ssh-action@master
        with:
          username: ubuntu
          host: ${{ secrets.BOOKEVERYWHERE_IP }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script_stop: true
          script: |
            sudo docker stop ${{env.CURRENT_UPSTREAM}}
            sudo docker rm ${{env.CURRENT_UPSTREAM}}
